<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: temporal/api/namespace/v1/message.proto

namespace Temporal\Api\PBNamespace\V1\NamespaceInfo;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Namespace capability details. Should contain what features are enabled in a namespace.
 *
 * Generated from protobuf message <code>temporal.api.namespace.v1.NamespaceInfo.Capabilities</code>
 */
class Capabilities extends \Google\Protobuf\Internal\Message
{
    /**
     * True if the namespace supports eager workflow start.
     *
     * Generated from protobuf field <code>bool eager_workflow_start = 1;</code>
     */
    protected $eager_workflow_start = false;
    /**
     * True if the namespace supports sync update
     *
     * Generated from protobuf field <code>bool sync_update = 2;</code>
     */
    protected $sync_update = false;
    /**
     * True if the namespace supports async update
     *
     * Generated from protobuf field <code>bool async_update = 3;</code>
     */
    protected $async_update = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type bool $eager_workflow_start
     *           True if the namespace supports eager workflow start.
     *     @type bool $sync_update
     *           True if the namespace supports sync update
     *     @type bool $async_update
     *           True if the namespace supports async update
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Temporal\Api\PBNamespace\V1\Message::initOnce();
        parent::__construct($data);
    }

    /**
     * True if the namespace supports eager workflow start.
     *
     * Generated from protobuf field <code>bool eager_workflow_start = 1;</code>
     * @return bool
     */
    public function getEagerWorkflowStart()
    {
        return $this->eager_workflow_start;
    }

    /**
     * True if the namespace supports eager workflow start.
     *
     * Generated from protobuf field <code>bool eager_workflow_start = 1;</code>
     * @param bool $var
     * @return $this
     */
    public function setEagerWorkflowStart($var)
    {
        GPBUtil::checkBool($var);
        $this->eager_workflow_start = $var;

        return $this;
    }

    /**
     * True if the namespace supports sync update
     *
     * Generated from protobuf field <code>bool sync_update = 2;</code>
     * @return bool
     */
    public function getSyncUpdate()
    {
        return $this->sync_update;
    }

    /**
     * True if the namespace supports sync update
     *
     * Generated from protobuf field <code>bool sync_update = 2;</code>
     * @param bool $var
     * @return $this
     */
    public function setSyncUpdate($var)
    {
        GPBUtil::checkBool($var);
        $this->sync_update = $var;

        return $this;
    }

    /**
     * True if the namespace supports async update
     *
     * Generated from protobuf field <code>bool async_update = 3;</code>
     * @return bool
     */
    public function getAsyncUpdate()
    {
        return $this->async_update;
    }

    /**
     * True if the namespace supports async update
     *
     * Generated from protobuf field <code>bool async_update = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setAsyncUpdate($var)
    {
        GPBUtil::checkBool($var);
        $this->async_update = $var;

        return $this;
    }

}

