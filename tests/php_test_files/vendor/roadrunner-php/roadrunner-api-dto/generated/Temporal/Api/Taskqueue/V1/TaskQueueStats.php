<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: temporal/api/taskqueue/v1/message.proto

namespace Temporal\Api\Taskqueue\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * For workflow task queues, we only report the normal queue stats, not sticky queues. This means the stats
 * reported here do not count all workflow tasks. However, because the tasks queued in sticky queues only remain
 * valid for a few seconds, the inaccuracy becomes less significant as the backlog age grows.
 *
 * Generated from protobuf message <code>temporal.api.taskqueue.v1.TaskQueueStats</code>
 */
class TaskQueueStats extends \Google\Protobuf\Internal\Message
{
    /**
     * The approximate number of tasks backlogged in this task queue. May count expired tasks but eventually converges
     * to the right value.
     *
     * Generated from protobuf field <code>int64 approximate_backlog_count = 1;</code>
     */
    protected $approximate_backlog_count = 0;
    /**
     * Approximate age of the oldest task in the backlog based on the create timestamp of the task at the head of the queue.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration approximate_backlog_age = 2;</code>
     */
    protected $approximate_backlog_age = null;
    /**
     * Approximate tasks per second added to the task queue based on activity within a fixed window. This includes both backlogged and
     * sync-matched tasks.
     *
     * Generated from protobuf field <code>float tasks_add_rate = 3;</code>
     */
    protected $tasks_add_rate = 0.0;
    /**
     * Approximate tasks per second dispatched to workers based on activity within a fixed window. This includes both backlogged and
     * sync-matched tasks.
     *
     * Generated from protobuf field <code>float tasks_dispatch_rate = 4;</code>
     */
    protected $tasks_dispatch_rate = 0.0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $approximate_backlog_count
     *           The approximate number of tasks backlogged in this task queue. May count expired tasks but eventually converges
     *           to the right value.
     *     @type \Google\Protobuf\Duration $approximate_backlog_age
     *           Approximate age of the oldest task in the backlog based on the create timestamp of the task at the head of the queue.
     *     @type float $tasks_add_rate
     *           Approximate tasks per second added to the task queue based on activity within a fixed window. This includes both backlogged and
     *           sync-matched tasks.
     *     @type float $tasks_dispatch_rate
     *           Approximate tasks per second dispatched to workers based on activity within a fixed window. This includes both backlogged and
     *           sync-matched tasks.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Temporal\Api\Taskqueue\V1\Message::initOnce();
        parent::__construct($data);
    }

    /**
     * The approximate number of tasks backlogged in this task queue. May count expired tasks but eventually converges
     * to the right value.
     *
     * Generated from protobuf field <code>int64 approximate_backlog_count = 1;</code>
     * @return int|string
     */
    public function getApproximateBacklogCount()
    {
        return $this->approximate_backlog_count;
    }

    /**
     * The approximate number of tasks backlogged in this task queue. May count expired tasks but eventually converges
     * to the right value.
     *
     * Generated from protobuf field <code>int64 approximate_backlog_count = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setApproximateBacklogCount($var)
    {
        GPBUtil::checkInt64($var);
        $this->approximate_backlog_count = $var;

        return $this;
    }

    /**
     * Approximate age of the oldest task in the backlog based on the create timestamp of the task at the head of the queue.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration approximate_backlog_age = 2;</code>
     * @return \Google\Protobuf\Duration|null
     */
    public function getApproximateBacklogAge()
    {
        return $this->approximate_backlog_age;
    }

    public function hasApproximateBacklogAge()
    {
        return isset($this->approximate_backlog_age);
    }

    public function clearApproximateBacklogAge()
    {
        unset($this->approximate_backlog_age);
    }

    /**
     * Approximate age of the oldest task in the backlog based on the create timestamp of the task at the head of the queue.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration approximate_backlog_age = 2;</code>
     * @param \Google\Protobuf\Duration $var
     * @return $this
     */
    public function setApproximateBacklogAge($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Duration::class);
        $this->approximate_backlog_age = $var;

        return $this;
    }

    /**
     * Approximate tasks per second added to the task queue based on activity within a fixed window. This includes both backlogged and
     * sync-matched tasks.
     *
     * Generated from protobuf field <code>float tasks_add_rate = 3;</code>
     * @return float
     */
    public function getTasksAddRate()
    {
        return $this->tasks_add_rate;
    }

    /**
     * Approximate tasks per second added to the task queue based on activity within a fixed window. This includes both backlogged and
     * sync-matched tasks.
     *
     * Generated from protobuf field <code>float tasks_add_rate = 3;</code>
     * @param float $var
     * @return $this
     */
    public function setTasksAddRate($var)
    {
        GPBUtil::checkFloat($var);
        $this->tasks_add_rate = $var;

        return $this;
    }

    /**
     * Approximate tasks per second dispatched to workers based on activity within a fixed window. This includes both backlogged and
     * sync-matched tasks.
     *
     * Generated from protobuf field <code>float tasks_dispatch_rate = 4;</code>
     * @return float
     */
    public function getTasksDispatchRate()
    {
        return $this->tasks_dispatch_rate;
    }

    /**
     * Approximate tasks per second dispatched to workers based on activity within a fixed window. This includes both backlogged and
     * sync-matched tasks.
     *
     * Generated from protobuf field <code>float tasks_dispatch_rate = 4;</code>
     * @param float $var
     * @return $this
     */
    public function setTasksDispatchRate($var)
    {
        GPBUtil::checkFloat($var);
        $this->tasks_dispatch_rate = $var;

        return $this;
    }

}

